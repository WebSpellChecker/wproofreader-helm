#### Properties specific to WProofreader
# set to true for the server to process HTTP requests over SSL only
useHTTPS: false

# external port of the container (for when you need to use default HTTP ports, or a specific one)
# if empty - uses 80 for HTTP and 443 for HTTPS
# for reference, container ports are 8080 for HTTP and 8443 for HTTPS
webPort: ""

# if you are using webspellchecker/wproofreader image from DockerHub, or have built your own, but did not provide a license key during the setup,
# enter it here or pass it with and environment variable to conceal sensitive data: --set licenseTicketID=$MY_LICENSE_KEY
# note: Helm does not allow its templates to read environment variables directly
licenseTicketID: ""

# extra environment variables to pass to the container
extraEnv: []
# extraEnv:
#   - name: WPR_DOMAIN_NAME
#     value: "wproofreader.domain-name.com"

# directory of the service for web and API requests, e.g. http://localhost/wscservice/api?cmd=ver
virtualDir: wscservice

# relative paths of key and cert files within the Helm Chart directory
# note: Helm cannot reach outside its chart directory to fetch your files
# leave empty if they are already present in the container
# use same file names as those specified in Dockerfile
# (i.e. WPR_CERT_FILE_NAME and WPR_CERT_KEY_NAME variables in WProofreader official Dockerfile: https://github.com/WebSpellChecker/wproofreader-docker)
# otherwise, one would have to manually edit the nginx config file (/etc/nginx/conf.d/wscservice.conf) on each Pod (in each container instance)
certFile: ""
keyFile: ""
# directory where the certificate and its key will be kept inside the container
# same remark as the one above on matching the Dockerfile variables applies
# (i.e. WPR_CERT_DIR variable in WProofreader official Dockerfile: https://github.com/WebSpellChecker/wproofreader-docker)
certMountPath: "/certificate"

# `dictionaries` structure provide storage for custom user dictionaries inside the cluster
dictionaries:
  # enable or disable persistence of custom dictionary feature
  enabled: false
  # name of existing the PersistentVolumeClaim to use for storing dictionaries
  existingClaim: ""
  # absolute path of the directory on the Kubernetes node where the files should be kept.
  # leave empty if no volume for custom dictionaries should be created.
  localPath: ""
  # location inside the container that the above directory should be mounted to
  # make sure it matches WPR_DICTIONARIES_DIR variable in the Dockerfile (https://github.com/WebSpellChecker/wproofreader-docker)
  mountPath: "/dictionaries"
  # maximum volume size â€“ make sure it can accommodate all your data
  volumeSize: "20Gi"
  # see Kubernetes reference on storage classes: https://kubernetes.io/docs/concepts/storage/storage-classes/
  storageClassName: "standard"
  # access mode for the volume
  accessMode: "ReadWriteMany"

#### Deployment properties

image:
  # format <repository>/<image name> (no tag!)
  repository: webspellchecker/wproofreader
  # options: IfNotPresent, Never, Always
  pullPolicy: IfNotPresent
  # overrides the image tag whose default is the chart appVersion.
  tag: ""

# Readiness Options allows customizing the default readiness probe
readinessProbeOptions: {}
#  initialDelaySeconds: 10
#  periodSeconds: 10
#  timeoutSeconds: 5
#  successThreshold: 1
#  failureThreshold: 3

# Liveness Options allows customizing the default liveness probe
livenessProbeOptions: {}
#  periodSeconds: 10
#  timeoutSeconds: 3
#  failureThreshold: 1

# number of Pods (AppServer instances) to retain; is ignored if HorizontalPodAutoscaling is enabled (see below)
replicaCount: 1

# HorizontalPodAutoscaling parameters. For more info, see documentation: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale
# if enabled, requires "resources" (see below)
# Note: WProofreader Server can be scaled only based on CPU usage metric. The targetMemoryUtilizationPercentage is not supported.
autoscaling: {}
#  enabled: false
#  minReplicas: 1
#  maxReplicas: 5
#  targetCPUUtilizationPercentage: 80

# Max resources usage allowed for pod
# have to be specified if HorizontalPodAutoscaling is enabled
# if none are given, uses all available on host
# (to add your values remove "{}" form the line below, uncomment and edit the ones further down)
# Ref: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
resources: {}
#  requests:
#    memory: "4Gi"
#    cpu: "1"
#  limits:
#    memory: "8Gi"
#    cpu: "4"

# if you keep you custom images in a private container repository, you might have to
# provide an imagePullSecret.
# See:
#  - https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
#  - https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []

# overrides default chart name ("wproofreader") used for naming resources
nameOverride: ""

# overrides default full chart name ("RELEASE-wproofreader") used for naming resources
fullnameOverride: ""

# Kubernetes Service for the deployment
# Within the cluster one could access an instance of the AppServer using
# <service-name>.<namespace>:<service-port> as hostname.
service:
  # on service types: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # overrides the defaults (80 for HTTP, 443 for HTTPS)
  port: ""
  # overrides default name ("RELEASE-wproofreader")
  name: ""

# Service Account for the deployment (if create is false, uses the one for namespace "default")
serviceAccount:
  create: true
  annotations: {}
  # overrides default name "RELEASE-wproofreader"
  name: ""

# `key: value` annotations paris for the AppServer pods
podAnnotations: {}

# permissions for the deployment: 2000 group allows read-write access to the dictionaries persistent volume
podSecurityContext:
  fsGroup: 2000

# See https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
securityContext: {}
#  capabilities:
#   drop:
#   - ALL
#  readOnlyRootFilesystem: true
#  runAsNonRoot: true
#  runAsUser: 1000

# the label is used for setting the affinity parameter, which specifies a set of
# labels that a candidate node for hosting the deployment should have
# we recommend customizing it for your use
# Example:
## nodeAffinityLabel: "wproofreader.domain-name.com/app"
nodeAffinityLabel: ""

# Affinity for pod assignment (evaluated as template)
# ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
affinity: {}
#  podAntiAffinity:
#    prefferedDuringSchedulingIgnoredDuringExecution:
#      - labelSelector:
#          matchExpressions:
#            - key: app.kubernetes.io/name
#              operator: In
#              values:
#                - wproofreader
#        topologyKey: kubernetes.io/hostname

# default deployment strategy for Kubernetes:
# allow no more than 25% (no fewer than 1) of pods be
# unavailable or allocated over max (surge) during update
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 25%
    maxSurge: 25%

# See "Taints and Tolerations": https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
tolerations: []
